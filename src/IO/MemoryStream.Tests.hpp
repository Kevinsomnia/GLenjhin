#pragma once

#include <algorithm>
#include <array>
#include <iomanip>
#include <iostream>

#include "MemoryStream.h"

using std::cout;
using std::cerr;
using std::endl;

// Crude way of testing. AKA, write a bunch of values and see stream can read it back to the original value.
// No unit tests since parsing/writing huge blobs of data consecutively is the general use case anyway.
namespace MemoryStreamTests
{
    static std::array<bool, 9> BOOL_TEST_VALUES
    {
        true, false, true, false, true, false, true, false, true
    };
    static std::array<uint8_t, 256> UINT8_TEST_VALUES
    {
        223, 218, 132,  64, 167, 129,   3, 209,  70,  38, 122, 181, 110, 144,  89, 137, 238,  98,  73, 106, 220, 165, 236, 186,   7,  84, 228, 237, 107, 127, 161,  41,
        159, 240, 112, 154,  32, 183,  69, 135,  29, 207, 166,  20,  91, 150,  16,  88, 252,  22,  80,  87, 191,  74, 189, 255, 117,  43, 192,  49,  45,  63, 100, 119,
         50, 250,  54, 251, 229,  30, 184, 142, 203,  12, 124, 221,  97,  61, 130,  46, 177, 187, 217,  31,  77,  78, 125, 219, 136, 226, 194,  58, 244, 185, 180, 243,
        148, 169, 212,  92, 249, 152,  39,  68,  94,  90, 123, 198, 147, 156, 197,  25, 153, 103, 146,  28, 195, 163, 131,  47, 196,  81, 102,  37, 172, 171, 200, 230,
         52, 234, 168,  67, 170, 141, 248,  18, 211, 235, 247,   1,  51, 158,  93, 115, 178, 193,  17,  55, 246,  65, 213,  83,  21,  99, 134,  56,  66, 151, 174, 140,
        101,  76, 201, 254,  36, 157, 111,  86, 225, 199,  72, 205,  14, 145, 232, 109,  82,  26,  57, 179, 126, 224, 128,  24, 133, 239, 139,   2, 176, 216,   4, 253,
        120,  40,   6, 160, 113,  96, 222,  42, 190,  34, 164,  48,  85, 143, 188,  27,  95, 116,   5, 105, 121,  44,  19, 118,  71, 233,  33,  53, 155, 231,   9,  13,
        114, 215, 245, 138,  35, 162, 227,  15, 206, 173,  75, 210, 204,   8,  23, 242, 202,  10, 108, 214,  59, 175,  62, 208, 104,  11, 241,  60, 149, 182,  79,   0
    };
    static std::array<uint16_t, 256> UINT16_TEST_VALUES
    {
            0,   253,   506,   759,  1012,  1265,  1518,  1771,  2024,  2277,  2530,  2783,  3036,  3289,  3542,  3795,  4048,  4301,  4554,  4807,  5060,  5313,  5566,  5819,  6072,  6325,  6578,  6831,  7084,  7337,  7590,  7843,
         8096,  8349,  8602,  8855,  9108,  9361,  9614,  9867, 10120, 10373, 10626, 10879, 11132, 11385, 11638, 11891, 12144, 12397, 12650, 12903, 13156, 13409, 13662, 13915, 14168, 14421, 14674, 14927, 15180, 15433, 15686, 15939,
        16192, 16445, 16698, 16951, 17204, 17457, 17710, 17963, 18216, 18469, 18722, 18975, 19228, 19481, 19734, 19987, 20240, 20493, 20746, 20999, 21252, 21505, 21758, 22011, 22264, 22517, 22770, 23023, 23276, 23529, 23782, 24035,
        24288, 24541, 24794, 25047, 25300, 25553, 25806, 26059, 26312, 26565, 26818, 27071, 27324, 27577, 27830, 28083, 28336, 28589, 28842, 29095, 29348, 29601, 29854, 30107, 30360, 30613, 30866, 31119, 31372, 31625, 31878, 32131,
        32384, 32637, 32890, 33143, 33396, 33649, 33902, 34155, 34408, 34661, 34914, 35167, 35420, 35673, 35926, 36179, 36432, 36685, 36938, 37191, 37444, 37697, 37950, 38203, 38456, 38709, 38962, 39215, 39468, 39721, 39974, 40227,
        40480, 40733, 40986, 41239, 41492, 41745, 41998, 42251, 42504, 42757, 43010, 43263, 43516, 43769, 44022, 44275, 44528, 44781, 45034, 45287, 45540, 45793, 46046, 46299, 46552, 46805, 47058, 47311, 47564, 47817, 48070, 48323,
        48576, 48829, 49082, 49335, 49588, 49841, 50094, 50347, 50600, 50853, 51106, 51359, 51612, 51865, 52118, 52371, 52624, 52877, 53130, 53383, 53636, 53889, 54142, 54395, 54648, 54901, 55154, 55407, 55660, 55913, 56166, 56419,
        56672, 56925, 57178, 57431, 57684, 57937, 58190, 58443, 58696, 58949, 59202, 59455, 59708, 59961, 60214, 60467, 60720, 60973, 61226, 61479, 61732, 61985, 62238, 62491, 62744, 62997, 63250, 63503, 63756, 64009, 64262, UINT16_MAX
    };
    static std::array<uint32_t, 256> UINT24_TEST_VALUES
    {
               0,    65533,   131066,   196599,   262132,   327665,   393198,   458731,   524264,   589797,   655330,   720863,   786396,   851929,   917462,   982995,
         1048528,  1114061,  1179594,  1245127,  1310660,  1376193,  1441726,  1507259,  1572792,  1638325,  1703858,  1769391,  1834924,  1900457,  1965990,  2031523,
         2097056,  2162589,  2228122,  2293655,  2359188,  2424721,  2490254,  2555787,  2621320,  2686853,  2752386,  2817919,  2883452,  2948985,  3014518,  3080051,
         3145584,  3211117,  3276650,  3342183,  3407716,  3473249,  3538782,  3604315,  3669848,  3735381,  3800914,  3866447,  3931980,  3997513,  4063046,  4128579,
         4194112,  4259645,  4325178,  4390711,  4456244,  4521777,  4587310,  4652843,  4718376,  4783909,  4849442,  4914975,  4980508,  5046041,  5111574,  5177107,
         5242640,  5308173,  5373706,  5439239,  5504772,  5570305,  5635838,  5701371,  5766904,  5832437,  5897970,  5963503,  6029036,  6094569,  6160102,  6225635,
         6291168,  6356701,  6422234,  6487767,  6553300,  6618833,  6684366,  6749899,  6815432,  6880965,  6946498,  7012031,  7077564,  7143097,  7208630,  7274163,
         7339696,  7405229,  7470762,  7536295,  7601828,  7667361,  7732894,  7798427,  7863960,  7929493,  7995026,  8060559,  8126092,  8191625,  8257158,  8322691,
         8388224,  8453757,  8519290,  8584823,  8650356,  8715889,  8781422,  8846955,  8912488,  8978021,  9043554,  9109087,  9174620,  9240153,  9305686,  9371219,
         9436752,  9502285,  9567818,  9633351,  9698884,  9764417,  9829950,  9895483,  9961016, 10026549, 10092082, 10157615, 10223148, 10288681, 10354214, 10419747,
        10485280, 10550813, 10616346, 10681879, 10747412, 10812945, 10878478, 10944011, 11009544, 11075077, 11140610, 11206143, 11271676, 11337209, 11402742, 11468275,
        11533808, 11599341, 11664874, 11730407, 11795940, 11861473, 11927006, 11992539, 12058072, 12123605, 12189138, 12254671, 12320204, 12385737, 12451270, 12516803,
        12582336, 12647869, 12713402, 12778935, 12844468, 12910001, 12975534, 13041067, 13106600, 13172133, 13237666, 13303199, 13368732, 13434265, 13499798, 13565331,
        13630864, 13696397, 13761930, 13827463, 13892996, 13958529, 14024062, 14089595, 14155128, 14220661, 14286194, 14351727, 14417260, 14482793, 14548326, 14613859,
        14679392, 14744925, 14810458, 14875991, 14941524, 15007057, 15072590, 15138123, 15203656, 15269189, 15334722, 15400255, 15465788, 15531321, 15596854, 15662387,
        15727920, 15793453, 15858986, 15924519, 15990052, 16055585, 16121118, 16186651, 16252184, 16317717, 16383250, 16448783, 16514316, 16579849, 16645382, (1 << 24) - 1
    };
    static std::array<uint32_t, 256> UINT32_TEST_VALUES
    {
                 0,   16777213,   33554426,   50331639,   67108852,   83886065,  100663278,  117440491,  134217704,  150994917,  167772130,  184549343,  201326556,  218103769,  234880982,  251658195,
         268435408,  285212621,  301989834,  318767047,  335544260,  352321473,  369098686,  385875899,  402653112,  419430325,  436207538,  452984751,  469761964,  486539177,  503316390,  520093603,
         536870816,  553648029,  570425242,  587202455,  603979668,  620756881,  637534094,  654311307,  671088520,  687865733,  704642946,  721420159,  738197372,  754974585,  771751798,  788529011,
         805306224,  822083437,  838860650,  855637863,  872415076,  889192289,  905969502,  922746715,  939523928,  956301141,  973078354,  989855567, 1006632780, 1023409993, 1040187206, 1056964419,
        1073741632, 1090518845, 1107296058, 1124073271, 1140850484, 1157627697, 1174404910, 1191182123, 1207959336, 1224736549, 1241513762, 1258290975, 1275068188, 1291845401, 1308622614, 1325399827,
        1342177040, 1358954253, 1375731466, 1392508679, 1409285892, 1426063105, 1442840318, 1459617531, 1476394744, 1493171957, 1509949170, 1526726383, 1543503596, 1560280809, 1577058022, 1593835235,
        1610612448, 1627389661, 1644166874, 1660944087, 1677721300, 1694498513, 1711275726, 1728052939, 1744830152, 1761607365, 1778384578, 1795161791, 1811939004, 1828716217, 1845493430, 1862270643,
        1879047856, 1895825069, 1912602282, 1929379495, 1946156708, 1962933921, 1979711134, 1996488347, 2013265560, 2030042773, 2046819986, 2063597199, 2080374412, 2097151625, 2113928838, 2130706051,
        2147483264, 2164260477, 2181037690, 2197814903, 2214592116, 2231369329, 2248146542, 2264923755, 2281700968, 2298478181, 2315255394, 2332032607, 2348809820, 2365587033, 2382364246, 2399141459,
        2415918672, 2432695885, 2449473098, 2466250311, 2483027524, 2499804737, 2516581950, 2533359163, 2550136376, 2566913589, 2583690802, 2600468015, 2617245228, 2634022441, 2650799654, 2667576867,
        2684354080, 2701131293, 2717908506, 2734685719, 2751462932, 2768240145, 2785017358, 2801794571, 2818571784, 2835348997, 2852126210, 2868903423, 2885680636, 2902457849, 2919235062, 2936012275,
        2952789488, 2969566701, 2986343914, 3003121127, 3019898340, 3036675553, 3053452766, 3070229979, 3087007192, 3103784405, 3120561618, 3137338831, 3154116044, 3170893257, 3187670470, 3204447683,
        3221224896, 3238002109, 3254779322, 3271556535, 3288333748, 3305110961, 3321888174, 3338665387, 3355442600, 3372219813, 3388997026, 3405774239, 3422551452, 3439328665, 3456105878, 3472883091,
        3489660304, 3506437517, 3523214730, 3539991943, 3556769156, 3573546369, 3590323582, 3607100795, 3623878008, 3640655221, 3657432434, 3674209647, 3690986860, 3707764073, 3724541286, 3741318499,
        3758095712, 3774872925, 3791650138, 3808427351, 3825204564, 3841981777, 3858758990, 3875536203, 3892313416, 3909090629, 3925867842, 3942645055, 3959422268, 3976199481, 3992976694, 4009753907,
        4026531120, 4043308333, 4060085546, 4076862759, 4093639972, 4110417185, 4127194398, 4143971611, 4160748824, 4177526037, 4194303250, 4211080463, 4227857676, 4244634889, 4261412102, UINT32_MAX
    };
    static std::array<uint64_t, 256> UINT64_TEST_VALUES
    {
                           0,    72057594037927911,   144115188075855822,   216172782113783733,   288230376151711644,   360287970189639555,   432345564227567466,   504403158265495377,
          576460752303423288,   648518346341351199,   720575940379279110,   792633534417207021,   864691128455134932,   936748722493062843,  1008806316530990754,  1080863910568918665,
         1152921504606846576,  1224979098644774487,  1297036692682702398,  1369094286720630309,  1441151880758558220,  1513209474796486131,  1585267068834414042,  1657324662872341953,
         1729382256910269864,  1801439850948197775,  1873497444986125686,  1945555039024053597,  2017612633061981508,  2089670227099909419,  2161727821137837330,  2233785415175765241,
         2305843009213693152,  2377900603251621063,  2449958197289548974,  2522015791327476885,  2594073385365404796,  2666130979403332707,  2738188573441260618,  2810246167479188529,
         2882303761517116440,  2954361355555044351,  3026418949592972262,  3098476543630900173,  3170534137668828084,  3242591731706755995,  3314649325744683906,  3386706919782611817,
         3458764513820539728,  3530822107858467639,  3602879701896395550,  3674937295934323461,  3746994889972251372,  3819052484010179283,  3891110078048107194,  3963167672086035105,
         4035225266123963016,  4107282860161890927,  4179340454199818838,  4251398048237746749,  4323455642275674660,  4395513236313602571,  4467570830351530482,  4539628424389458393,
         4611686018427386304,  4683743612465314215,  4755801206503242126,  4827858800541170037,  4899916394579097948,  4971973988617025859,  5044031582654953770,  5116089176692881681,
         5188146770730809592,  5260204364768737503,  5332261958806665414,  5404319552844593325,  5476377146882521236,  5548434740920449147,  5620492334958377058,  5692549928996304969,
         5764607523034232880,  5836665117072160791,  5908722711110088702,  5980780305148016613,  6052837899185944524,  6124895493223872435,  6196953087261800346,  6269010681299728257,
         6341068275337656168,  6413125869375584079,  6485183463413511990,  6557241057451439901,  6629298651489367812,  6701356245527295723,  6773413839565223634,  6845471433603151545,
         6917529027641079456,  6989586621679007367,  7061644215716935278,  7133701809754863189,  7205759403792791100,  7277816997830719011,  7349874591868646922,  7421932185906574833,
         7493989779944502744,  7566047373982430655,  7638104968020358566,  7710162562058286477,  7782220156096214388,  7854277750134142299,  7926335344172070210,  7998392938209998121,
         8070450532247926032,  8142508126285853943,  8214565720323781854,  8286623314361709765,  8358680908399637676,  8430738502437565587,  8502796096475493498,  8574853690513421409,
         8646911284551349320,  8718968878589277231,  8791026472627205142,  8863084066665133053,  8935141660703060964,  9007199254740988875,  9079256848778916786,  9151314442816844697,
         9223372036854772608,  9295429630892700519,  9367487224930628430,  9439544818968556341,  9511602413006484252,  9583660007044412163,  9655717601082340074,  9727775195120267985,
         9799832789158195896,  9871890383196123807,  9943947977234051718, 10016005571271979629, 10088063165309907540, 10160120759347835451, 10232178353385763362, 10304235947423691273,
        10376293541461619184, 10448351135499547095, 10520408729537475006, 10592466323575402917, 10664523917613330828, 10736581511651258739, 10808639105689186650, 10880696699727114561,
        10952754293765042472, 11024811887802970383, 11096869481840898294, 11168927075878826205, 11240984669916754116, 11313042263954682027, 11385099857992609938, 11457157452030537849,
        11529215046068465760, 11601272640106393671, 11673330234144321582, 11745387828182249493, 11817445422220177404, 11889503016258105315, 11961560610296033226, 12033618204333961137,
        12105675798371889048, 12177733392409816959, 12249790986447744870, 12321848580485672781, 12393906174523600692, 12465963768561528603, 12538021362599456514, 12610078956637384425,
        12682136550675312336, 12754194144713240247, 12826251738751168158, 12898309332789096069, 12970366926827023980, 13042424520864951891, 13114482114902879802, 13186539708940807713,
        13258597302978735624, 13330654897016663535, 13402712491054591446, 13474770085092519357, 13546827679130447268, 13618885273168375179, 13690942867206303090, 13763000461244231001,
        13835058055282158912, 13907115649320086823, 13979173243358014734, 14051230837395942645, 14123288431433870556, 14195346025471798467, 14267403619509726378, 14339461213547654289,
        14411518807585582200, 14483576401623510111, 14555633995661438022, 14627691589699365933, 14699749183737293844, 14771806777775221755, 14843864371813149666, 14915921965851077577,
        14987979559889005488, 15060037153926933399, 15132094747964861310, 15204152342002789221, 15276209936040717132, 15348267530078645043, 15420325124116572954, 15492382718154500865,
        15564440312192428776, 15636497906230356687, 15708555500268284598, 15780613094306212509, 15852670688344140420, 15924728282382068331, 15996785876419996242, 16068843470457924153,
        16140901064495852064, 16212958658533779975, 16285016252571707886, 16357073846609635797, 16429131440647563708, 16501189034685491619, 16573246628723419530, 16645304222761347441,
        16717361816799275352, 16789419410837203263, 16861477004875131174, 16933534598913059085, 17005592192950986996, 17077649786988914907, 17149707381026842818, 17221764975064770729,
        17293822569102698640, 17365880163140626551, 17437937757178554462, 17509995351216482373, 17582052945254410284, 17654110539292338195, 17726168133330266106, 17798225727368194017,
        17870283321406121928, 17942340915444049839, 18014398509481977750, 18086456103519905661, 18158513697557833572, 18230571291595761483, 18302628885633689394, UINT64_MAX
    };
    static std::array<float, 256> FLOAT_TEST_VALUES
    {
         -657679.625f,  -652540.875f, -647402.1875f, -642263.4375f,   -637124.75f,    -631986.0f, -626847.3125f, -621708.5625f,
         -616569.875f,  -611431.125f, -606292.4375f, -601153.6875f,    -596015.0f,   -590876.25f,    -585737.5f, -580598.8125f,
        -575460.0625f,  -570321.375f,  -565182.625f, -560043.9375f, -554905.1875f,    -549766.5f,   -544627.75f, -539489.0625f,
        -534350.3125f,  -529211.625f,  -524072.875f, -518934.1562f, -513795.4375f, -508656.6875f,    -503518.0f,   -498379.25f,
        -493240.5625f, -488101.8125f,  -482963.125f,  -477824.375f, -472685.6562f, -467546.9375f, -462408.2188f,    -457269.5f,
        -452130.7812f, -446992.0625f, -441853.3125f,  -436714.625f,  -431575.875f, -426437.1875f, -421298.4375f,   -416159.75f,
           -411021.0f, -405882.2812f, -400743.5625f, -395604.8438f,  -390466.125f, -385327.4062f, -380188.6875f, -375049.9688f,
          -369911.25f, -364772.5312f, -359633.7812f, -354495.0625f, -349356.3438f,  -344217.625f, -339078.9062f, -333940.1875f,
        -328801.4688f,   -323662.75f, -318524.0312f, -313385.3125f, -308246.5938f,  -303107.875f, -297969.1562f, -292830.4062f,
        -287691.6875f, -282552.9688f,   -277414.25f, -272275.5312f, -267136.8125f, -261998.0938f,  -256859.375f, -251720.6562f,
        -246581.9375f, -241443.2188f,    -236304.5f, -231165.7812f, -226027.0312f, -220888.3125f, -215749.5938f,  -210610.875f,
        -205472.1562f, -200333.4375f, -195194.7188f,    -190056.0f, -184917.2812f, -179778.5625f, -174639.8438f,  -169501.125f,
         -164362.375f, -159223.6562f, -154084.9375f, -148946.2188f,    -143807.5f, -138668.7812f, -133530.0625f, -128391.3125f,
         -123252.625f,  -118113.875f, -112975.1875f, -107836.4375f,   -102697.75f,     -97559.0f,  -92420.3125f,  -87281.5625f,
          -82142.875f,   -77004.125f,  -71865.4375f,  -66726.6875f,  -61587.9375f,    -56449.25f,     -51310.5f,  -46171.8125f,
         -41033.0625f,   -35894.375f,   -30755.625f,  -25616.9375f,  -20478.1875f,     -15339.5f,    -10200.75f,   -5062.0625f,
             76.6875f,    5215.4375f,    10354.125f,    15492.875f,   20631.5625f,   25770.3125f,      30909.0f,     36047.75f,
          41186.4375f,   46325.1875f,    51463.875f,    56602.625f,   61741.3125f,   66880.0625f,   72018.8125f,      77157.5f,
            82296.25f,   87434.9375f,   92573.6875f,    97712.375f,   102851.125f,  107989.8125f,  113128.5625f,    118267.25f,
            123406.0f,  128544.6875f,  133683.4375f,  138822.1875f,   143960.875f,   149099.625f,  154238.3125f,  159377.0625f,
           164515.75f,     169654.5f,  174793.1875f,  179931.9375f,   185070.625f,   190209.375f,  195348.0625f,  200486.8125f,
         205625.5625f,    210764.25f,     215903.0f,  221041.6875f,  226180.4375f,   231319.125f,   236457.875f,  241596.5625f,
         246735.3125f,     251874.0f,    257012.75f,  262151.4375f,  267290.1875f,  272428.9375f,   277567.625f,   282706.375f,
         287845.0625f,  292983.8125f,     298122.5f,    303261.25f,  308399.9375f,  313538.6875f,   318677.375f,   323816.125f,
          328954.875f,  334093.5625f,  339232.3125f,     344371.0f,    349509.75f,  354648.4375f,  359787.1875f,   364925.875f,
          370064.625f,  375203.3125f,  380342.0625f,    385480.75f,     390619.5f,    395758.25f,     400897.0f,   406035.625f,
          411174.375f,   416313.125f,   421451.875f,     426590.5f,    431729.25f,     436868.0f,    442006.75f,   447145.375f,
          452284.125f,   457422.875f,   462561.625f,   467700.375f,     472839.0f,    477977.75f,     483116.5f,    488255.25f,
          493393.875f,   498532.625f,   503671.375f,   508810.125f,    513948.75f,     519087.5f,    524226.25f,     529365.0f,
           534503.75f,   539642.375f,   544781.125f,   549919.875f,   555058.625f,    560197.25f,     565336.0f,    570474.75f,
            575613.5f,   580752.125f,   585890.875f,   591029.625f,   596168.375f,   601307.125f,    606445.75f,     611584.5f,
           616723.25f,     621862.0f,   627000.625f,   632139.375f,   637278.125f,   642416.875f,     647555.5f,    652694.25f
    };
    static std::array<double, 256> DOUBLE_TEST_VALUES
    {
        -657675872159.65014648, -652537779408.40283203, -647399686657.15563965,  -642261593905.9083252, -637123501154.66113281, -631985408403.41381836, -626847315652.16650391, -621709222900.91931152,
        -616571130149.67199707, -611433037398.42480469, -606294944647.17749023, -601156851895.93017578,  -596018759144.6829834, -590880666393.43566895, -585742573642.18847656, -580604480890.94116211,
        -575466388139.69384766, -570328295388.44665527, -565190202637.19934082, -560052109885.95214844, -554914017134.70483398, -549775924383.45751953, -544637831632.21032715,  -539499738880.9630127,
        -534361646129.71575928, -529223553378.46850586, -524085460627.22125244, -518947367875.97399902, -513809275124.72668457, -508671182373.47943115, -503533089622.23217773, -498394996870.98486328,
         -493256904119.7376709, -488118811368.49035645, -482980718617.24310303, -477842625865.99584961, -472704533114.74853516, -467566440363.50134277, -462428347612.25402832,  -457290254861.0067749,
        -452152162109.75952148, -447014069358.51220703, -441875976607.26501465,  -436737883856.0177002, -431599791104.77044678, -426461698353.52319336, -421323605602.27587891, -416185512851.02868652,
        -411047420099.78137207, -405909327348.53411865, -400771234597.28686523, -395633141846.03955078,  -390495049094.7923584, -385356956343.54504395, -380218863592.29779053, -375080770841.05053711,
        -369942678089.80328369, -364804585338.55596924, -359666492587.30871582,  -354528399836.0614624, -349390307084.81420898, -344252214333.56695557, -339114121582.31964111,  -333976028831.0723877,
        -328837936079.82513428, -323699843328.57788086, -318561750577.33062744, -313423657826.08331299, -308285565074.83605957, -303147472323.58880615, -298009379572.34155273, -292871286821.09429932,
        -287733194069.84698486, -282595101318.59973145, -277457008567.35247803, -272318915816.10522461, -267180823064.85797119, -262042730313.61065674, -256904637562.36340332,  -251766544811.1161499,
        -246628452059.86889648, -241490359308.62164307, -236352266557.37432861,  -231214173806.1270752, -226076081054.87982178, -220937988303.63256836, -215799895552.38531494, -210661802801.13800049,
        -205523710049.89074707, -200385617298.64349365, -195247524547.39624023, -190109431796.14898682, -184971339044.90167236, -179833246293.65441895, -174695153542.40716553, -169557060791.15991211,
        -164418968039.91259766, -159280875288.66534424, -154142782537.41809082,  -149004689786.1708374, -143866597034.92358398, -138728504283.67626953, -133590411532.42901611,  -128452318781.1817627,
        -123314226029.93450928, -118176133278.68725586, -113038040527.43994141, -107899947776.19274902, -102761855024.94543457, -97623762273.698120117, -92485669522.450927734, -87347576771.203613281,
        -82209484019.956420898, -77071391268.709106445, -71933298517.461791992, -66795205766.214599609, -61657113014.967285156, -56519020263.720092773,  -51380927512.47277832, -46242834761.225463867,
        -41104742009.978271484, -35966649258.730957031, -30828556507.483764648, -25690463756.236450195, -20552371004.989135742, -15414278253.741943359, -10276185502.494628906, -5138092751.2474365234,
              -0.0001220703125,  5138092751.2471923828,  10276185502.494384766,  15414278253.741699219,  20552371004.988891602,  25690463756.236206055,  30828556507.483520508,  35966649258.730712891,
         41104742009.978027344,  46242834761.225219727,   51380927512.47253418,  56519020263.719848633,  61657113014.967041016,  66795205766.214355469,  71933298517.461547852,  77071391268.708862305,
         82209484019.956176758,  87347576771.203369141,  92485669522.450683594,  97623762273.697875977,  102761855024.94519043,  107899947776.19250488,  113038040527.43969727,  118176133278.68701172,
          123314226029.9342041,  128452318781.18151855,  133590411532.42883301,  138728504283.67602539,  143866597034.92333984,  149004689786.17053223,  154142782537.41784668,  159280875288.66516113,
         164418968039.91235352,  169557060791.15966797,  174695153542.40686035,   179833246293.6541748,  184971339044.90148926,  190109431796.14868164,  195247524547.39599609,  200385617298.64318848,
         205523710049.89050293,  210661802801.13781738,  215799895552.38500977,  220937988303.63232422,   226076081054.8795166,  231214173806.12683105,  236352266557.37414551,  241490359308.62133789,
         246628452059.86865234,  251766544811.11584473,  256904637562.36315918,  262042730313.61047363,  267180823064.85766602,  272318915816.10498047,  277457008567.35217285,   282595101318.5994873,
         287733194069.84680176,  292871286821.09399414,  298009379572.34130859,  303147472323.58850098,  308285565074.83581543,  313423657826.08312988,  318561750577.33032227,  323699843328.57763672,
         328837936079.82495117,  333976028831.07214355,  339114121582.31945801,  344252214333.56665039,  349390307084.81396484,   354528399836.0612793,  359666492587.30847168,  364804585338.55578613,
         369942678089.80297852,  375080770841.05029297,  380218863592.29760742,   385356956343.5447998,  390495049094.79211426,  395633141846.03930664,  400771234597.28662109,  405909327348.53393555,
         411047420099.78112793,  416185512851.02844238,  421323605602.27563477,  426461698353.52294922,  431599791104.77026367,  436737883856.01745605,  441875976607.26464844,  447014069358.51196289,
         452152162109.75927734,   457290254861.0065918,  462428347612.25390625,  467566440363.50097656,  472704533114.74829102,  477842625865.99560547,  482980718617.24291992,  488118811368.49023438,
         493256904119.73730469,  498394996870.98461914,  503533089622.23193359,  508671182373.47924805,   513809275124.7265625,  518947367875.97363281,  524085460627.22094727,  529223553378.46826172,
         534361646129.71557617,  539499738880.96289062,  544637831632.20996094,  549775924383.45727539,  554914017134.70458984,   560052109885.9519043,  565190202637.19921875,  570328295388.44628906,
         575466388139.69360352,  580604480890.94091797,  585742573642.18823242,  590880666393.43554688,  596018759144.68261719,  601156851895.92993164,  606294944647.17724609,  611433037398.42456055,
           616571130149.671875,  621709222900.91894531,  626847315652.16625977,  631985408403.41357422,  637123501154.66088867,  642261593905.90820312,  647399686657.15527344,  652537779408.40258789
    };

    static void Run();
    static void Test_SerializeDeserialize();

    void Run()
    {
        Test_SerializeDeserialize();
    }

    void Test_SerializeDeserialize()
    {
        uint8_t readBuf[256];
        memset(readBuf, 0, 256);

        MemoryStream test = MemoryStream();

        // ===========================
        // WRITING: BOOL
        // ===========================
        for (size_t i = 0; i < BOOL_TEST_VALUES.size(); i++)
            test.writeBool(BOOL_TEST_VALUES[i]);

        // ===========================
        // WRITING: UINT8
        // ===========================
        for (size_t i = 0; i < UINT8_TEST_VALUES.size(); i++)
            test.writeUInt8(UINT8_TEST_VALUES[i]);

        // ===========================
        // WRITING: UINT8 (BITS 1 TO 8)
        // ===========================
        for (size_t i = 0; i < UINT8_TEST_VALUES.size(); i++)
        {
            for (uint8_t j = 1; j <= 8; j++)
                test.writeUInt8(UINT8_TEST_VALUES[i], j);
        }

        // ===========================
        // WRITING: UINT16 (BIG/LITTLE)
        // ===========================
        for (size_t i = 0; i < UINT16_TEST_VALUES.size(); i++)
        {
            test.writeUInt16(UINT16_TEST_VALUES[i], MemoryStream::Endian::Big);
            test.writeUInt16(UINT16_TEST_VALUES[i], MemoryStream::Endian::Little);
        }

        // ===========================
        // WRITING: UINT16 (BITS 8 TO 16) (BIG/LITTLE)
        // ===========================
        for (size_t i = 0; i < UINT16_TEST_VALUES.size(); i++)
        {
            for (uint8_t j = 8; j <= 16; j++)
            {
                test.writeUInt16(UINT16_TEST_VALUES[i], j, MemoryStream::Endian::Big);
                test.writeUInt16(UINT16_TEST_VALUES[i], j, MemoryStream::Endian::Little);
            }
        }

        // ===========================
        // WRITING: UINT24 (BIG/LITTLE)
        // ===========================
        for (size_t i = 0; i < UINT24_TEST_VALUES.size(); i++)
        {
            test.writeUInt24(UINT24_TEST_VALUES[i], MemoryStream::Endian::Big);
            test.writeUInt24(UINT24_TEST_VALUES[i], MemoryStream::Endian::Little);
        }

        // ===========================
        // WRITING: UINT24 (BITS 16 TO 24) (BIG/LITTLE)
        // ===========================
        for (size_t i = 0; i < UINT24_TEST_VALUES.size(); i++)
        {
            for (uint8_t j = 16; j <= 24; j++)
            {
                test.writeUInt24(UINT24_TEST_VALUES[i], j, MemoryStream::Endian::Big);
                test.writeUInt24(UINT24_TEST_VALUES[i], j, MemoryStream::Endian::Little);
            }
        }

        // ===========================
        // WRITING: UINT32 (BIG/LITTLE)
        // ===========================
        for (size_t i = 0; i < UINT32_TEST_VALUES.size(); i++)
        {
            test.writeUInt32(UINT32_TEST_VALUES[i], MemoryStream::Endian::Big);
            test.writeUInt32(UINT32_TEST_VALUES[i], MemoryStream::Endian::Little);
        }

        // ===========================
        // WRITING: UINT32 (BITS 24 TO 32) (BIG/LITTLE)
        // ===========================
        for (size_t i = 0; i < UINT32_TEST_VALUES.size(); i++)
        {
            for (uint8_t j = 24; j <= 32; j++)
            {
                test.writeUInt32(UINT32_TEST_VALUES[i], j, MemoryStream::Endian::Big);
                test.writeUInt32(UINT32_TEST_VALUES[i], j, MemoryStream::Endian::Little);
            }
        }

        // ===========================
        // WRITING: FLOAT
        // ===========================
        for (size_t i = 0; i < FLOAT_TEST_VALUES.size(); i++)
            test.writeFloat(FLOAT_TEST_VALUES[i]);

        // ===========================
        // WRITING: UINT64 (BIG/LITTLE)
        // ===========================
        for (size_t i = 0; i < UINT64_TEST_VALUES.size(); i++)
        {
            test.writeUInt64(UINT64_TEST_VALUES[i], MemoryStream::Endian::Big);
            test.writeUInt64(UINT64_TEST_VALUES[i], MemoryStream::Endian::Little);
        }

        // ===========================
        // WRITING: UINT64 (BITS 32 TO 64) (BIG/LITTLE)
        // ===========================
        for (size_t i = 0; i < UINT64_TEST_VALUES.size(); i++)
        {
            for (uint8_t j = 32; j <= 64; j++)
            {
                test.writeUInt64(UINT64_TEST_VALUES[i], j, MemoryStream::Endian::Big);
                test.writeUInt64(UINT64_TEST_VALUES[i], j, MemoryStream::Endian::Little);
            }
        }

        // ===========================
        // WRITING: DOUBLE
        // ===========================
        for (size_t i = 0; i < DOUBLE_TEST_VALUES.size(); i++)
            test.writeDouble(DOUBLE_TEST_VALUES[i]);

        // ===========================
        // WRITING: BYTE ARRAY
        // ===========================
        test.write(UINT8_TEST_VALUES.data(), UINT8_TEST_VALUES.size());
        test.write(UINT8_TEST_VALUES.data() + 84, 31);
        test.ceilToByteBoundary();
        test.writeUInt8(1);
        test.write(UINT8_TEST_VALUES.data() + 172, 15);




        test.setPosition(0);

        // ===========================
        // READING: BOOL
        // ===========================
        for (size_t i = 0; i < BOOL_TEST_VALUES.size(); i++)
        {
            if (test.readBool() != BOOL_TEST_VALUES[i])
                cerr << "readBool failed! expected: " << BOOL_TEST_VALUES[i] << endl;
        }

        // ===========================
        // READING: UINT8
        // ===========================
        for (size_t i = 0; i < UINT8_TEST_VALUES.size(); i++)
        {
            if (test.readUInt8() != UINT8_TEST_VALUES[i])
                cerr << "readUInt8 failed! expected: " << UINT8_TEST_VALUES[i] << endl;
        }

        // ===========================
        // READING: UINT8 (BITS 1 TO 8)
        // ===========================
        for (size_t i = 0; i < UINT8_TEST_VALUES.size(); i++)
        {
            for (uint8_t j = 1; j <= 8; j++)
            {
                uint8_t maskedValue = UINT8_TEST_VALUES[i] & ((1ULL << j) - 1);
                if (test.readUInt8(j) != maskedValue)
                {
                    cerr << "readUInt8(bits) failed! expected: " << maskedValue << "  bits: " << +j << endl;
                }
            }
        }

        // ===========================
        // READING: UINT16 (BIG/LITTLE)
        // ===========================
        for (size_t i = 0; i < UINT16_TEST_VALUES.size(); i++)
        {
            uint16_t val = UINT16_TEST_VALUES[i];
            if (test.readUInt16(MemoryStream::Endian::Big) != val)
                cerr << "readUInt16 BIG failed! expected: " << val << endl;
            if (test.readUInt16(MemoryStream::Endian::Little) != val)
                cerr << "readUInt16 LITTLE failed! expected: " << val << endl;
        }

        // ===========================
        // READING: UINT16 (BIG/LITTLE) (BITS 8 TO 16)
        // ===========================
        for (size_t i = 0; i < UINT16_TEST_VALUES.size(); i++)
        {
            for (uint8_t j = 8; j <= 16; j++)
            {
                uint16_t maskedValue = UINT16_TEST_VALUES[i] & ((1ULL << j) - 1);
                if (test.readUInt16(j, MemoryStream::Endian::Big) != maskedValue)
                    cerr << "readUInt16(bits) BIG failed! expected: " << maskedValue << "  bits: " << +j << endl;
                if (test.readUInt16(j, MemoryStream::Endian::Little) != maskedValue)
                    cerr << "readUInt16(bits) LITTLE failed! expected: " << maskedValue << "  bits: " << +j << endl;
            }
        }

        // ===========================
        // READING: UINT24 (BIG/LITTLE)
        // ===========================
        for (size_t i = 0; i < UINT24_TEST_VALUES.size(); i++)
        {
            uint32_t val = UINT24_TEST_VALUES[i];
            if (test.readUInt24(MemoryStream::Endian::Big) != val)
                cerr << "readUInt24 BIG failed! expected:" << val << endl;
            if (test.readUInt24(MemoryStream::Endian::Little) != val)
                cerr << "readUInt24 LITTLE failed! expected: " << val << endl;
        }

        // ===========================
        // READING: UINT24 (BIG/LITTLE) (BITS 16 TO 24)
        // ===========================
        for (size_t i = 0; i < UINT24_TEST_VALUES.size(); i++)
        {
            for (uint8_t j = 16; j <= 24; j++)
            {
                uint32_t maskedValue = UINT24_TEST_VALUES[i] & ((1ULL << j) - 1);
                if (test.readUInt24(j, MemoryStream::Endian::Big) != maskedValue)
                    cerr << "readUInt24(bits) BIG failed! expected: " << maskedValue << "  bits: " << +j << endl;
                if (test.readUInt24(j, MemoryStream::Endian::Little) != maskedValue)
                    cerr << "readUInt24(bits) LITTLE failed! expected: " << maskedValue << "  bits: " << +j << endl;
            }
        }

        // ===========================
        // READING: UINT32 (BIG/LITTLE)
        // ===========================
        for (size_t i = 0; i < UINT32_TEST_VALUES.size(); i++)
        {
            uint32_t val = UINT32_TEST_VALUES[i];
            if (test.readUInt32(MemoryStream::Endian::Big) != val)
                cerr << "readUInt32 BIG failed! expected: " << val << endl;
            if (test.readUInt32(MemoryStream::Endian::Little) != val)
                cerr << "readUInt32 LITTLE failed! expected: " << val << endl;
        }

        // ===========================
        // READING: UINT32 (BITS 24 TO 32) (BIG/LITTLE)
        // ===========================
        for (size_t i = 0; i < UINT32_TEST_VALUES.size(); i++)
        {
            for (uint8_t j = 24; j <= 32; j++)
            {
                uint32_t maskedValue = UINT32_TEST_VALUES[i] & ((1ULL << j) - 1);
                if (test.readUInt32(j, MemoryStream::Endian::Big) != maskedValue)
                    cerr << "readUInt32(bits) BIG failed! expected: " << maskedValue << "  bits: " << +j << endl;
                if (test.readUInt32(j, MemoryStream::Endian::Little) != maskedValue)
                    cerr << "readUInt32(bits) LITTLE failed! expected: " << maskedValue << "  bits: " << +j << endl;
            }
        }

        // ===========================
        // READING: FLOAT
        // ===========================
        for (size_t i = 0; i < FLOAT_TEST_VALUES.size(); i++)
        {
            if (std::abs(test.readFloat() - FLOAT_TEST_VALUES[i]) > 0.00001f)
                cerr << "readFloat failed! expected:" << FLOAT_TEST_VALUES[i] << endl;
        }

        // ===========================
        // READING: UINT64 (BIG/LITTLE)
        // ===========================
        for (size_t i = 0; i < UINT64_TEST_VALUES.size(); i++)
        {
            uint64_t val = UINT64_TEST_VALUES[i];
            if (test.readUInt64(MemoryStream::Endian::Big) != val)
                cerr << "readUInt64 BIG failed! expected: " << val << endl;
            if (test.readUInt64(MemoryStream::Endian::Little) != val)
                cerr << "readUInt64 LITTLE failed! expected: " << val << endl;
        }

        // ===========================
        // READING: UINT64 (BITS 32 TO 64) (BIG/LITTLE)
        // ===========================
        for (size_t i = 0; i < UINT64_TEST_VALUES.size(); i++)
        {
            for (uint8_t j = 32; j <= 64; j++)
            {
                uint64_t maskedValue = UINT64_TEST_VALUES[i] & ((1ULL << j) - 1);
                if (test.readUInt64(j, MemoryStream::Endian::Big) != maskedValue)
                    cerr << "readUInt64(bits) BIG failed! expected: " << maskedValue << "  bits: " << +j << endl;
                if (test.readUInt64(j, MemoryStream::Endian::Little) != maskedValue)
                    cerr << "readUInt64(bits) LITTLE failed! expected: " << maskedValue << "  bits: " << +j << endl;
            }
        }

        // ===========================
        // READING: DOUBLE
        // ===========================
        for (size_t i = 0; i < DOUBLE_TEST_VALUES.size(); i++)
        {
            if (std::abs(test.readDouble() - DOUBLE_TEST_VALUES[i]) > 0.00000001)
                cerr << "readDouble failed! expected: " << DOUBLE_TEST_VALUES[i] << endl;
        }

        // ===========================
        // READING: BYTE ARRAY
        // ===========================
        test.read(readBuf, UINT8_TEST_VALUES.size());
        if (memcmp(UINT8_TEST_VALUES.data(), readBuf, UINT8_TEST_VALUES.size()) != 0)
            cerr << "read #1 failed!" << endl;
        test.read(readBuf, 31);
        if (memcmp(UINT8_TEST_VALUES.data() + 84, readBuf, 31) != 0)
            cerr << "read #2 failed!" << endl;
        test.ceilToByteBoundary();
        if (test.readInt8() != 1)
            cerr << "read #3 failed!" << endl;
        test.read(readBuf, 15);
        if (memcmp(UINT8_TEST_VALUES.data() + 172, readBuf, 15) != 0)
            cerr << "read #4 failed!" << endl;
    }
}
